#!/usr/bin/env ansible-playbook
---
- name: Print degub info
  hosts: sandboxes
  tasks:
    - debug: 
        msg: "Ansible Distribution: {{ ansible_distribution }} \n Ansible Dist version: {{ ansible_distribution_version }} \nAnsible Vars: {{ ansible_env }}"
  tags: debug_info
- name: Install Editor
  hosts: sandboxes
  become: False
  tasks:
    - name: "Install Packages"
      become: True
      package:
        name: 
          - neovim
          - gcc # treesitter
          - fzf # Search
          - ripgrep # Telescope
          - git
        update_cache: True
    - name: "Add git repo"
      become: True
      ansible.builtin.apt_repository:
        repo: ppa:git-core/ppa
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: "Add neovim repo"
      become: True
      ansible.builtin.apt_repository:
        repo: ppa:neovim-ppa/stable
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: "Install Debian Packages"
      become: True
      package:
        name: 
          - sqlite3
          - libsqlite3-dev
          - build-essential
        update_cache: True
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: "Install Fedora Packages"
      become: True
      package:
        name: 
          - sqlite
          - "@development-tools"
          - "gcc-c++"
        update_cache: True
      when: ansible_distribution == 'Fedora'
    - name: Make sure ssk keys are passed to guest.
      local_action: command ssh-add
    - name: Create lua directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/nvim/lua"
        state: directory
    - name: Create symlink for neovim
      ansible.builtin.file:
        src: "{{ dot_files_path }}/dot-files/config/nvim/init.lua"
        dest: "{{ ansible_env.HOME }}/.config/nvim/init.lua"
        state: link
    - name: Create symlink for neovim 2
      ansible.builtin.file:
        src: "{{ dot_files_path }}/dot-files/config/nvim/lua/user"
        dest: "{{ ansible_env.HOME }}/.config/nvim/lua/user"
        state: link
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: ~/.local/share/nvim/databases
        state: directory
    - name: Create symlink for Tmux
      ansible.builtin.file:
        src: "{{ dot_files_path }}/dot-files/.tmux.conf"
        dest: "{{ ansible_env.HOME }}/.tmux.conf"
        state: link
    - name: Create symlink for Tmux 2
      ansible.builtin.file:
        src: "{{ dot_files_path }}/dot-files/tmux_dev.sh"
        dest: "{{ ansible_env.HOME }}/tmux_dev.sh"
        state: link

- name: Install Tmux
  hosts: sandboxes
  become: False
  tasks:
    - name: "Install Packages"
      become: True
      package:
        name: 
          - tmux
        update_cache: True
    - name: Download tpm, Tmux plugin manager
      ansible.builtin.git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
        accept_hostkey: yes
- name: Install zsh
  hosts: sandboxes
  become: False
  tasks:
    - name: "Install Packages"
      become: True
      package:
        name:
          - zsh
    - name: Change shell
      become: True
      user:
        name: "{{ ansible_env.USERNAME }}"
        shell: /bin/zsh
    - name: "Check if oh my zsh exists"
      stat:
        path: "{{ ansible_env.HOME }}/.oh-my-zsh"
      register: result
    - name: Download oh-my-zsh
      when: (result.stat.isreg is undefined) or (not result.stat.isreg)
      ansible.builtin.git:
        repo: https://github.com/ohmyzsh/ohmyzsh.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh"
    - name: Powerlevel10k
      when: (result.stat.isreg is undefined) or (not result.stat.isreg)
      ansible.builtin.git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/themes/powerlevel10k"
        depth: 1
    - name: Set default zsh config
      when: (result.stat.isreg is undefined) or (not result.stat.isreg)
      ansible.builtin.copy:
        src: .zshrc
        dest: "{{ ansible_env.HOME }}/.zshrc"
    - name: Set powerlevel10k config
      when: (result.stat.isreg is undefined) or (not result.stat.isreg)
      ansible.builtin.copy:
        src: .p10k.zsh
        dest: "{{ ansible_env.HOME }}/.p10k.zsh"
    - name: Zsh autosuggestions
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/plugins/zsh-autosuggestions"
        depth: 1
    - name: Zsh syntax highlight
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/plugins/zsh-syntax-highlighting"
        depth: 1
- name: Install Fonts
  hosts: sandboxes
  become: False
  tasks:
    - name: ensure fonts directory
      file:
        path: "{{ ansible_env.HOME }}/.fonts"
        state: directory
    - name: "Check if FiraCode Nerd exists"
      stat:
        path: "{{ ansible_env.HOME }}/.fonts/Fira*Code*"
      register: result

    - name: Download Fira
      when: (result.stat.isreg is undefined) or (not result.stat.isreg)
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip
        dest: "{{ ansible_env.HOME }}/.fonts/"
        remote_src: yes
    - name: Reload fonts
      command: fc-cache -f -v
- name: Install Caps Lock conversion
  # Change with gnome-tweaks and xcape
  hosts: localhost
  become: False
  tasks:
    - name: "Install Packages for Debian"
      become: True
      package:
        name: 
          - gnome-tweaks # TODO automate
          - git 
          - gcc 
          - make 
          - pkg-config 
        update_cache: True
    - name: "Install Packages for Debian"
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      become: True
      package:
        name: 
          - libx11-dev 
          - libxtst-dev 
          - libxi-dev
        update_cache: True
    - name: "Install Packages for Fedora"
      become: True
      when: ansible_distribution == 'Fedora'
      package:
        name: 
          - libX11-devel 
          - libXtst-devel 
          - libXi-devel
        update_cache: True
    - name: Download xcape
      ansible.builtin.git:
        repo: https://github.com/alols/xcape.git 
        dest: "{{ ansible_env.HOME }}/xcape"
        accept_hostkey: yes
    - name: Make xcape
      command: make
      args:
        chdir: "{{ ansible_env.HOME }}/xcape"
    - name: Install xcape
      become: True
      command: make install
      args:
        chdir: "{{ ansible_env.HOME }}/xcape"
- name: Install Caps Lock conversion
  # refencehttps://gist.github.com/jandvanegas/2057f4ec1d4fc29d5bb3543020a7923f 
  # For fedora is udevmon is not installed by default, disabled for now
  hosts: disabled
  become: False
  tasks:
    - name: "Install Packages"
      become: True
      package:
        name: 
          - cmake
          - gnome-tweaks # TODO automate
        update_cache: True
    - name: Download caps2esc
      ansible.builtin.git:
        repo: https://gitlab.com/interception/linux/plugins/caps2esc.git
        dest: "{{ ansible_env.HOME }}/caps2esc"
        accept_hostkey: yes
    - name: Build caps2esc
      command: cmake -B build -DCMAKE_BUILD_TYPE=Release
      args:
        chdir: "{{ ansible_env.HOME }}/caps2esc"
    - name: Make caps2esc
      command: cmake --build build
      args:
        chdir: "{{ ansible_env.HOME }}/caps2esc"
    - name: Create symlink for caps2esc
      become: True
      ansible.builtin.file:
        src: "{{ ansible_env.HOME }}/caps2esc/build/caps2esc"
        dest: "/usr/local/bin/caps2esc"
        state: link
    - name: Copy to udevmon
      become: True
      ansible.builtin.copy:
        src: ./caps2esc.yml
        dest: "/etc/interception/udevmon.d/"
    - name: Enable udevmon
      become: True
      command: systemctl enable udevmon
